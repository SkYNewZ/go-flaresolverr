// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package flaresolverr

import (
	"errors"
	"fmt"
)

const (
	// CommandSessionscreate is a command of type sessions.create.
	CommandSessionscreate command = "sessions.create"
	// CommandSessionslist is a command of type sessions.list.
	CommandSessionslist command = "sessions.list"
	// CommandSessionsdestroy is a command of type sessions.destroy.
	CommandSessionsdestroy command = "sessions.destroy"
	// CommandRequestget is a command of type request.get.
	CommandRequestget command = "request.get"
	// CommandRequestpost is a command of type request.post.
	CommandRequestpost command = "request.post"
)

var ErrInvalidcommand = errors.New("not a valid command")

// String implements the Stringer interface.
func (x command) String() string {
	return string(x)
}

// String implements the Stringer interface.
func (x command) IsValid() bool {
	_, err := Parsecommand(string(x))
	return err == nil
}

var _commandValue = map[string]command{
	"sessions.create":  CommandSessionscreate,
	"sessions.list":    CommandSessionslist,
	"sessions.destroy": CommandSessionsdestroy,
	"request.get":      CommandRequestget,
	"request.post":     CommandRequestpost,
}

// Parsecommand attempts to convert a string to a command.
func Parsecommand(name string) (command, error) {
	if x, ok := _commandValue[name]; ok {
		return x, nil
	}
	return command(""), fmt.Errorf("%s is %w", name, ErrInvalidcommand)
}

// MarshalText implements the text marshaller method.
func (x command) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *command) UnmarshalText(text []byte) error {
	tmp, err := Parsecommand(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
